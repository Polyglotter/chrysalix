/*
 * Polyglotter (http://polyglotter.org)
 * See the COPYRIGHT.txt file distributed with this work for information
 * regarding copyright ownership.  Some portions may be licensed
 * to Red Hat, Inc. under one or more contributor license agreements.
 * See the AUTHORS.txt file in the distribution for a full listing of 
 * individual contributors.
 *
 * Polyglotter is free software. Unless otherwise indicated, all code in Polyglotter
 * is licensed to you under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * Polyglotter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
<nt='http://www.jcp.org/jcr/nt/1.0'>
<poly='http://jboss.org/polyglotter/1.0'>

[poly:unstructured] mixin orderable
  - * (undefined) multiple
  - * (undefined)
  + * (nt:base) = nt:unstructured sns version
  
/*
[poly:Object] > nt:unstructured orderable
- poly:primaryType (string) = "poly:Object" mandatory autoCreated
- poly:secondaryTypes (string) *
+ poly:attributes (poly:Attribute) = poly:Attribute

[poly:Attribute] > nt:unstructured orderable abstract
- poly:type (string) mandatory
- poly:readOnly (boolean) = false

[poly:Containment] > poly:Attribute
- poly:defaultValue (string) // Value must be valid text representation of poly:Attribute.type
- poly:value (string) // Value must be valid text representation of poly:Attribute.type

[poly:Reference] > poly:Attribute
- poly:defaultValue (weakReference) < "poly:Object" // Value must be subclass of poly:Attribute.type
- poly:value (weakReference) < "poly:Object" // Value must be subclass of poly:Attribute.type
*/