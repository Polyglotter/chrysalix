/*
 * Polyglotter (http://polyglotter.org)
 * See the COPYRIGHT.txt file distributed with this work for information
 * regarding copyright ownership.  Some portions may be licensed
 * to Red Hat, Inc. under one or more contributor license agreements.
 * See the AUTHORS.txt file in the distribution for a full listing of 
 * individual contributors.
 *
 * Polyglotter is free software. Unless otherwise indicated, all code in Polyglotter
 * is licensed to you under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * Polyglotter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
<nt='http://www.jcp.org/jcr/nt/1.0'>
<mm='http://modeshape.org/modeshape-modeler/1.0'>

[mm:unstructured] mixin orderable
  - * (undefined) multiple
  - * (undefined)
  + * (nt:base) = nt:unstructured sns version

[mm:dependency] > nt:unstructured
  - mm:sourceReference (string) multiple mandatory
  - mm:path (string)
  
[mm:dependencies] > nt:unstructured
  + mm:dependency (mm:dependency) sns

[mm:model] mixin
  - mm:metamodel (string)
  + mm:dependencies (mm:dependencies)

// parent node of all metamodel categories
[mm:metamodelCategories] > nt:unstructured
  + * (mm:metamodelCategory) = mm:metamodelCategory copy

// parent node of archive files
[mm:archives] > nt:unstructured
  + * (nt:file, mix:referenceable) = nt:file copy // node name is archive name

// parent node of metamodels
[mm:metamodels] > nt:unstructured
  + * (mm:metamodel) = mm:metamodel copy

// node name is the category name
[mm:metamodelCategory] > nt:unstructured
  + mm:archives (mm:archives) = mm:archives copy
  + mm:metamodels (mm:metamodel) = mm:metamodels copy
  
// node name is the metamodel name
[mm:metamodel] > nt:unstructured, mix:referenceable
  - mm:fileExtensions (string) multiple
  - mm:sequencerClassName (string)
  - mm:desequencerClassName (string)
  - mm:dependencyProcessorClassName (string)  
  
